'\" t
.\"     Title: git-conflict
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 11/18/2016
.\"    Manual: git-octopus suit Manual
.\"    Source: git-octopus 1.4
.\"  Language: English
.\"
.TH "GIT\-CONFLICT" "1" "11/18/2016" "git\-octopus 1\&.4" "git\-octopus suit Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-conflict \- record conflict resolution\&.
.SH "SYNOPSIS"
.sp
.nf
\fIgit conflict\fR <commit>
\fIgit conflict\fR \-\-continue | \-\-abort | \-l
.fi
.SH "DESCRIPTION"
.sp
\fIgit conflict\fR records a conflict resolution between two branches that \fIgit octopus\fR will be able to reuse\&.
.sp
Start the recording process between the current branch and an other branch with
.sp
.if n \{\
.RS 4
.\}
.nf
$ git conflict an_other_branch
.fi
.if n \{\
.RE
.\}
.sp
This will set the index and the working tree in the conflict state\&. Once you\(cqve resolved it using \fIgit add\fR, run \fIgit conflict \-\-continue\fR to record the resolution\&. It will print a ref that points to the resolution and resets the repository back to HEAD\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ git conflict \-\-continue
Conflict resolution created: refs/conflicts/75dd2c142264373c96a3341b2f9fb57bec7a7b7d
.fi
.if n \{\
.RE
.\}
.sp
So \fIgit conflict\fR doesn\(cqt write history in your current branch\&.
.sp
\fIgit conflict \-\-continue\fR fails if a resolution for the same conflict already exists\&. To override a resolution you will need to delete the ref with \fIgit update\-ref \-d <ref>\fR before recording the new one and possibly force the push\&.
.sp
If you\(cqre satisfied with the resolution you can push it using a simple \fIgit push\fR\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ git push origin refs/conflicts/75dd2c142264373c96a3341b2f9fb57bec7a7b7d
.fi
.if n \{\
.RE
.\}
.SH "OPTIONS"
.PP
\-l
.RS 4
List all resolutions
.RE
.PP
\-\-abort
.RS 4
Abort the current conflict resolution process, and try to reconstruct the pre\-merge state\&.
.sp
If there were uncommitted worktree changes present when the merge started, git conflict \-\-abort will in some cases be unable to reconstruct these changes\&. It is therefore recommended to always commit or stash your changes before running git conflict\&.
.RE
.PP
\-\-continue
.RS 4
Record the index state as the resolution of the conflict and prints its ref\&. The index and the working tree are reset back to HEAD\&.
.RE
.SH "INTERNALS"
.sp
The first thing to know is that a conflict ref, for instance refs/conflicts/75dd2c142264373c96a3341b2f9fb57bec7a7b7d, is a standard commit\&. You can inspect it with \fIgit show\fR or any logger tool\&. It has an author and dates etc\&...
.sp
The sha1 in the ref is a hash of the content of the conflict that has been resolved\&. This allows resolutions to be found easily by other commands given a conflict state by simply hashing the conflict content and looking for a refs/conflict/<sha1> of the same name\&. A resolution is not related to a particular branch, it can be applied in any circumstances that produced the same conflict\&. This means that you can continue to commit on your branches, you can rebase them, rename them anyhow\&. As long as the same conflict is produced, the resolution can be retrieved\&.
.SH "LIMITATIONS"
.sp
Currently, when reapplying a resolution, it will only look at both modified files\&. So conflicts with renames, mod changes and deletions are not handled\&. In addition, If you changed something in a file that wasn\(cqt in conflict state, it won\(cqt be reapply neither\&.
.sp
Managing conflicts with more than a single branch is subtle\&. Let\(cqs say I\(cqm on a local branch topic_mine and I have two different conflicts with topic_arya and topic_eddard
.sp
.if n \{\
.RS 4
.\}
.nf
          A\-\-\-B\-\-\-C topic_mine
         /
    D\-\-\-E\-\-\-F\-\-\-G topic_eddard
         \e
          H\-\-\-I topic_arya
.fi
.if n \{\
.RE
.\}
.sp
I can write two resolutions
.sp
.if n \{\
.RS 4
.\}
.nf
$ git conflict topic_arya
\&.\&.\&.
$ git conflict \-\-continue
Conflict resolution created: refs/conflicts/9a4b40f6ec56260618b820e19c8bd734fbfb744d
$ git conflict topic_eddard
\&.\&.\&.
git conflict \-\-continue
Conflict resolution created: refs/conflicts/8b3d16d22d0138ddbe6a1cd1a4cb9abf516a4609
.fi
.if n \{\
.RE
.\}
.sp
If I run \fIgit octopus topic_*\fR on my current branch (topic_mine), it will starts by merging topic_arya (branches are sorted alphabeticaly), will find the first resolution and then apply changes from topic_eddard, find the 2nd resolution and end up with a success\&. Let\(cqs push !
.sp
.if n \{\
.RS 4
.\}
.nf
$ git push origin refs/conflicts/9a4b40f6ec56260618b820e19c8bd734fbfb744d refs/conflicts/8b3d16d22d0138ddbe6a1cd1a4cb9abf516a4609
.fi
.if n \{\
.RE
.\}
.sp
Then Arya fetches and runs \fIgit octopus topic_*\fR from her branch topic_arya\&. It will starts by merging topic_eddard, no conflict happens (assuming), then merges topic_mine\&. The actual conflict of that merge will combine both conflicts because the current state have changes from both topic_arya and topic_eddard\&. This means that this conflict has a new signature that doesn\(cqt have any resolution and the octopus will fail\&. In this case \fIgit octopus\fR is not associative\&.
.SH "GIT\-OCTOPUS"
.sp
Part of the git\-octopus suit\&.
