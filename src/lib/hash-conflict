cat-UU-conflict() {
	leftContent=
	rightContent=
	reading="base"

	while read l ; do
		[[ $l == \<\<\<\<\<\<\<* ]] && reading="left" && continue
		[[ $l == \=\=\=\=\=\=\=* ]] && reading="right" && continue
		[[ $l == \>\>\>\>\>\>\>* ]] && reading="base" && continue

		case $reading in
			"base")
			;;
			"left")
				leftContent+="$l$LF"
			;;
			"right")
				rightContent+="$l$LF"
			;;
		esac
	done < "$1"

	conflictContent=
	if ! $ordered && [ "$leftContent" \< "$rightContent" ] ; then
		conflictContent="$leftContent$LF$rightContent"
	else
		conflictContent="$rightContent$LF$leftContent"
	fi

	echo "$conflictContent"
}

hash-conflict () {
	#	-o         Make the order between left and right side matters.
	#	-i <file>  Read <file> instead of conflicting paths in the index  
	ordered=false
	file=
	while getopts "oi:h" opt; do
		case "$opt" in
		h)
			usage
			return 0
		;;
		o)
			ordered=true
		;;
		i)
			file=$OPTARG
		;;
		*)
			usage
			return 1
		;;
		esac
	done

	conflictContent=

	while read status ; do
		state=$(echo $status | awk '{print $1;}')
		path=$(echo $status | awk '{print $2;}')
		case $state in
		    "UU")
				conflictContent+="$(cat-UU-conflict $path)$LF"
			;;
	    esac
	done <<< "$(if [ -z "$file" ] ; then echo "$(git status --porcelain | grep "^U.\|^.U\|^AA\|^DD" | awk -v cdup="$(git rev-parse --show-cdup)" '{print $1" "cdup$2;}')" ; else echo "UU $file" ; fi)"

	echo "$conflictContent" | shasum | cut -f 1 -d " "
}
